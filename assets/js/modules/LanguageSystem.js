/**
 * ========================================
 * LANGUAGE SYSTEM - SISTEMA PRINCIPAL
 * ========================================
 * 
 * Este √© o m√≥dulo principal que orquestra todo o sistema
 * de idiomas. Ele coordena:
 * - LanguageManager (gerenciamento de idiomas)
 * - LanguageSelector (interface visual)
 * - Translations (dados de tradu√ß√£o)
 * 
 * Princ√≠pios aplicados:
 * - Facade Pattern (interface simplificada)
 * - Dependency Injection
 * - Event-Driven Architecture
 * - Error Handling
 * 
 * @author Precision Solutions
 * @version 2.0.0
 * @since 2024
 */

class LanguageSystem {
    /**
     * ========================================
     * CONSTRUTOR - INICIALIZA√á√ÉO DO SISTEMA
     * ========================================
     * 
     * @param {Object} options - Op√ß√µes de configura√ß√£o
     */
    constructor(options = {}) {
        // Configura√ß√µes do sistema
        this.config = {
            // Idioma padr√£o
            defaultLanguage: options.defaultLanguage || 'pt',
            
            // Chave para localStorage
            storageKey: options.storageKey || 'precision-language',
            
            // Container do seletor
            selectorContainer: options.selectorContainer || '.nav-menu',
            
            // Idiomas dispon√≠veis
            availableLanguages: options.availableLanguages || ['pt', 'en', 'es'],
            
            // Configura√ß√µes de debug
            debug: options.debug || false,
            
            // Callbacks personalizados
            onLanguageChange: options.onLanguageChange || null,
            onSystemReady: options.onSystemReady || null,
            onError: options.onError || null,
            
            ...options
        };

        // Estado do sistema
        this.isInitialized = false;
        this.isReady = false;
        this.currentLanguage = this.config.defaultLanguage;

        // Componentes do sistema
        this.components = {
            manager: null,
            selector: null,
            translations: null
        };

        // Event listeners personalizados
        this.eventListeners = new Map();

        // Bind dos m√©todos
        this.handleLanguageChange = this.handleLanguageChange.bind(this);
        this.handleSystemError = this.handleSystemError.bind(this);
    }

    /**
     * ========================================
     * INICIALIZA√á√ÉO DO SISTEMA
     * ========================================
     * 
     * Inicializa todos os componentes do sistema de idiomas
     * em ordem correta e com tratamento de erros.
     * 
     * @returns {Promise<boolean>} - True se inicializado com sucesso
     */
    async init() {
        try {
            console.log('üöÄ Inicializando LanguageSystem...');

            // 1. Verificar depend√™ncias
            this.validateDependencies();

            // 2. Inicializar gerenciador de idiomas
            await this.initializeManager();

            // 3. Inicializar seletor de idiomas
            await this.initializeSelector();

            // 4. Configurar event listeners
            this.setupEventListeners();

            // 5. Aplicar idioma atual
            await this.applyCurrentLanguage();

            // 6. Marcar como inicializado
            this.isInitialized = true;
            this.isReady = true;

            // 7. Notificar que o sistema est√° pronto
            this.notifySystemReady();

            console.log('‚úÖ LanguageSystem inicializado com sucesso!');
            return true;

        } catch (error) {
            this.handleSystemError(error);
            return false;
        }
    }

    /**
     * ========================================
     * VALIDA√á√ÉO DE DEPEND√äNCIAS
     * ========================================
     * 
     * Verifica se todas as depend√™ncias necess√°rias
     * est√£o dispon√≠veis.
     */
    validateDependencies() {
        const dependencies = [
            { name: 'LanguageManager', obj: window.LanguageManager },
            { name: 'LanguageSelector', obj: window.LanguageSelector },
            { name: 'Translations', obj: window.Translations }
        ];

        const missing = dependencies.filter(dep => !dep.obj);
        
        if (missing.length > 0) {
            throw new Error(`Depend√™ncias ausentes: ${missing.map(d => d.name).join(', ')}`);
        }

        console.log('‚úÖ Todas as depend√™ncias est√£o dispon√≠veis');
    }

    /**
     * ========================================
     * INICIALIZA√á√ÉO DO GERENCIADOR
     * ========================================
     * 
     * Cria e inicializa o LanguageManager com as
     * configura√ß√µes apropriadas.
     */
    async initializeManager() {
        console.log('üîß Inicializando LanguageManager...');

        // Criar inst√¢ncia do gerenciador
        this.components.manager = new LanguageManager({
            defaultLanguage: this.config.defaultLanguage,
            storageKey: this.config.storageKey,
            translations: window.Translations,
            debug: this.config.debug
        });

        // Inicializar o gerenciador
        const success = await this.components.manager.init();
        
        if (!success) {
            throw new Error('Falha ao inicializar LanguageManager');
        }

        // Obter idioma atual
        this.currentLanguage = this.components.manager.currentLanguage;

        console.log('‚úÖ LanguageManager inicializado');
    }

    /**
     * ========================================
     * INICIALIZA√á√ÉO DO SELETOR
     * ========================================
     * 
     * Cria e inicializa o LanguageSelector com as
     * configura√ß√µes apropriadas.
     */
    async initializeSelector() {
        console.log('üé® Inicializando LanguageSelector...');

        // Preparar idiomas para o seletor
        const languages = this.prepareLanguagesForSelector();

        // Criar inst√¢ncia do seletor
        this.components.selector = new LanguageSelector({
            container: this.config.selectorContainer,
            languages: languages,
            currentLanguage: this.currentLanguage,
            onLanguageChange: this.handleLanguageChange
        });

        // Renderizar o seletor
        const success = this.components.selector.render();
        
        if (!success) {
            throw new Error('Falha ao renderizar LanguageSelector');
        }

        console.log('‚úÖ LanguageSelector inicializado');
    }

    /**
     * ========================================
     * PREPARA√á√ÉO DE IDIOMAS PARA O SELETOR
     * ========================================
     * 
     * Converte os c√≥digos de idioma em objetos
     * completos com nomes e bandeiras.
     * 
     * @returns {Array} - Array de objetos de idiomas
     */
    prepareLanguagesForSelector() {
        const languageMap = {
            'pt': { name: 'Portugu√™s', flag: 'üáßüá∑' },
            'en': { name: 'English', flag: 'üá∫üá∏' },
            'es': { name: 'Espa√±ol', flag: 'üá™üá∏' }
        };

        return this.config.availableLanguages.map(code => ({
            code: code,
            name: languageMap[code]?.name || code.toUpperCase(),
            flag: languageMap[code]?.flag || 'üåê'
        }));
    }

    /**
     * ========================================
     * CONFIGURA√á√ÉO DE EVENT LISTENERS
     * ========================================
     * 
     * Configura todos os event listeners do sistema.
     */
    setupEventListeners() {
        // Event listener para mudan√ßa de idioma
        if (this.components.manager) {
            this.components.manager.on('onLanguageChange', this.handleLanguageChange);
        }

        // Event listener para erros do sistema
        window.addEventListener('error', this.handleSystemError);

        console.log('üéß Event listeners configurados');
    }

    /**
     * ========================================
     * HANDLER - MUDAN√áA DE IDIOMA
     * ========================================
     * 
     * Manipula mudan√ßas de idioma em todo o sistema.
     * 
     * @param {Object} data - Dados da mudan√ßa
     */
    async handleLanguageChange(data) {
        try {
            console.log('üåç Mudan√ßa de idioma detectada:', data);

            // Atualizar idioma atual
            this.currentLanguage = data.current;

            // Atualizar seletor se necess√°rio
            if (this.components.selector) {
                this.components.selector.updateCurrentLanguage(data.current);
            }

            // Chamar callback personalizado se fornecido
            if (this.config.onLanguageChange) {
                await this.config.onLanguageChange(data);
            }

            // Notificar listeners personalizados
            this.notifyListeners('languageChange', data);

            console.log('‚úÖ Mudan√ßa de idioma processada');

        } catch (error) {
            this.handleSystemError(error);
        }
    }

    /**
     * ========================================
     * HANDLER - ERROS DO SISTEMA
     * ========================================
     * 
     * Manipula erros que ocorrem no sistema.
     * 
     * @param {Error} error - Erro ocorrido
     */
    handleSystemError(error) {
        console.error('‚ùå Erro no LanguageSystem:', error);

        // Chamar callback de erro se fornecido
        if (this.config.onError) {
            this.config.onError(error);
        }

        // Notificar listeners de erro
        this.notifyListeners('error', { error: error.message });
    }

    /**
     * ========================================
     * APLICA√á√ÉO DO IDIOMA ATUAL
     * ========================================
     * 
     * Aplica o idioma atual em todo o sistema.
     */
    async applyCurrentLanguage() {
        if (this.components.manager) {
            await this.components.manager.applyCurrentLanguage();
        }
    }

    /**
     * ========================================
     * MUDAN√áA DE IDIOMA
     * ========================================
     * 
     * M√©todo p√∫blico para mudar o idioma do sistema.
     * 
     * @param {string} languageCode - C√≥digo do idioma
     * @returns {Promise<boolean>} - True se mudan√ßa foi bem-sucedida
     */
    async changeLanguage(languageCode) {
        if (!this.isReady) {
            console.warn('‚ö†Ô∏è Sistema n√£o est√° pronto');
            return false;
        }

        if (this.components.manager) {
            return await this.components.manager.changeLanguage(languageCode);
        }

        return false;
    }

    /**
     * ========================================
     * OBTEN√á√ÉO DO IDIOMA ATUAL
     * ========================================
     * 
     * Retorna o idioma atual do sistema.
     * 
     * @returns {string} - C√≥digo do idioma atual
     */
    getCurrentLanguage() {
        return this.currentLanguage;
    }

    /**
     * ========================================
     * OBTEN√á√ÉO DE IDIOMAS DISPON√çVEIS
     * ========================================
     * 
     * Retorna a lista de idiomas dispon√≠veis.
     * 
     * @returns {Array} - Array de c√≥digos de idiomas
     */
    getAvailableLanguages() {
        return [...this.config.availableLanguages];
    }

    /**
     * ========================================
     * VERIFICA√á√ÉO DE IDIOMA V√ÅLIDO
     * ========================================
     * 
     * Verifica se um idioma √© v√°lido.
     * 
     * @param {string} languageCode - C√≥digo do idioma
     * @returns {boolean} - True se o idioma √© v√°lido
     */
    isValidLanguage(languageCode) {
        return this.config.availableLanguages.includes(languageCode);
    }

    /**
     * ========================================
     * REGISTRO DE EVENT LISTENERS
     * ========================================
     * 
     * Permite registrar listeners para eventos
     * personalizados do sistema.
     * 
     * @param {string} event - Nome do evento
     * @param {Function} listener - Fun√ß√£o listener
     */
    addEventListener(event, listener) {
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        this.eventListeners.get(event).push(listener);
    }

    /**
     * ========================================
     * REMO√á√ÉO DE EVENT LISTENERS
     * ========================================
     * 
     * Remove um listener espec√≠fico.
     * 
     * @param {string} event - Nome do evento
     * @param {Function} listener - Fun√ß√£o listener
     */
    removeEventListener(event, listener) {
        if (this.eventListeners.has(event)) {
            const listeners = this.eventListeners.get(event);
            const index = listeners.indexOf(listener);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        }
    }

    /**
     * ========================================
     * NOTIFICA√á√ÉO DE LISTENERS
     * ========================================
     * 
     * Notifica todos os listeners de um evento.
     * 
     * @param {string} event - Nome do evento
     * @param {Object} data - Dados do evento
     */
    notifyListeners(event, data) {
        if (this.eventListeners.has(event)) {
            this.eventListeners.get(event).forEach(listener => {
                try {
                    listener(data);
                } catch (error) {
                    console.error(`‚ùå Erro no listener ${event}:`, error);
                }
            });
        }
    }

    /**
     * ========================================
     * NOTIFICA√á√ÉO DE SISTEMA PRONTO
     * ========================================
     * 
     * Notifica que o sistema est√° pronto para uso.
     */
    notifySystemReady() {
        const data = {
            currentLanguage: this.currentLanguage,
            availableLanguages: this.getAvailableLanguages(),
            system: this
        };

        // Chamar callback personalizado se fornecido
        if (this.config.onSystemReady) {
            this.config.onSystemReady(data);
        }

        // Notificar listeners
        this.notifyListeners('systemReady', data);

        // Disparar evento customizado no DOM
        document.dispatchEvent(new CustomEvent('languageSystemReady', {
            detail: data
        }));
    }

    /**
     * ========================================
     * OBTEN√á√ÉO DE INFORMA√á√ïES DO SISTEMA
     * ========================================
     * 
     * Retorna informa√ß√µes completas sobre o sistema.
     * 
     * @returns {Object} - Informa√ß√µes do sistema
     */
    getSystemInfo() {
        return {
            isInitialized: this.isInitialized,
            isReady: this.isReady,
            currentLanguage: this.currentLanguage,
            availableLanguages: this.getAvailableLanguages(),
            components: {
                manager: !!this.components.manager,
                selector: !!this.components.selector,
                translations: !!this.components.translations
            },
            config: {
                defaultLanguage: this.config.defaultLanguage,
                storageKey: this.config.storageKey,
                debug: this.config.debug
            }
        };
    }

    /**
     * ========================================
     * DESTRUI√á√ÉO DO SISTEMA
     * ========================================
     * 
     * Destr√≥i todos os componentes e limpa
     * as refer√™ncias do sistema.
     */
    destroy() {
        console.log('üóëÔ∏è Destruindo LanguageSystem...');

        // Destruir componentes
        if (this.components.manager) {
            this.components.manager.destroy();
        }

        if (this.components.selector) {
            this.components.selector.destroy();
        }

        // Remover event listeners
        window.removeEventListener('error', this.handleSystemError);
        this.eventListeners.clear();

        // Limpar refer√™ncias
        this.components = {
            manager: null,
            selector: null,
            translations: null
        };

        // Resetar estado
        this.isInitialized = false;
        this.isReady = false;
        this.currentLanguage = this.config.defaultLanguage;

        console.log('‚úÖ LanguageSystem destru√≠do');
    }
}

// Exportar a classe
window.LanguageSystem = LanguageSystem;
